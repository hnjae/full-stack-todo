// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid()) @db.Uuid
  email        String         @unique
  password     String
  createdAt    DateTime       @default(now())
  RefreshToken RefreshToken[]
  Todo         Todo[]
  TodoList     TodoList[]
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid // will be used as jti in refreshToken
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  issuedAt  DateTime
  expiresAt DateTime
}

model Todo {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  title       String
  description String?
  completed   Boolean   @default(false)
  order       Int       @default(0)
  dueDate     DateTime?

  userId     String   @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  todoListId String   @db.Uuid
  TodoList   TodoList @relation(fields: [todoListId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([todoListId])
}

model TodoList {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name  String @unique
  order Int    @default(0)

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  todos Todo[]

  @@index([userId])
}
